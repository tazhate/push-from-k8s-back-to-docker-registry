# templates/configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: push-images-script
  namespace: {{ .Values.daemonset.namespace }}
data:
  push_images.sh: |
    #!/bin/bash
    set -e

    REGISTRY_URL="{{ .Values.registry.url }}"
    REGISTRY_USERNAME="{{ .Values.registry.username }}"
    REGISTRY_PASSWORD="{{ .Values.registry.password }}"
    NAMESPACES="{{ join "," .Values.monitor.namespaces }}"
    DEPLOYMENTS="{{ join "," .Values.monitor.deployments }}"

    # Authenticate with the registry
    echo "$REGISTRY_PASSWORD" | crictl login $REGISTRY_URL -u $REGISTRY_USERNAME --password-stdin

    # Function to get images from deployments
    get_images() {
      local namespace=$1
      local deployment=$2
      if [ -n "$deployment" ]; then
        kubectl get deployment $deployment -n $namespace -o jsonpath='{.spec.template.spec.containers[*].image}'
      else
        kubectl get deployments -n $namespace -o jsonpath='{.items[*].spec.template.spec.containers[*].image}'
      fi
    }

    IFS=',' read -r -a NS_ARRAY <<< "$NAMESPACES"
    IFS=',' read -r -a DEP_ARRAY <<< "$DEPLOYMENTS"

    declare -A images_map

    for ns in "${NS_ARRAY[@]}"; do
      if [ ${#DEP_ARRAY[@]} -eq 0 ]; then
        # Get all deployments in the namespace
        imgs=$(get_images "$ns" "")
      else
        # Get specified deployments
        for dep in "${DEP_ARRAY[@]}"; do
          imgs=$(get_images "$ns" "$dep")
          echo "Images for deployment $dep in namespace $ns: $imgs"
          for img in $imgs; do
            images_map["$img"]=1
          done
        done
        continue
      fi

      for img in $imgs; do
        images_map["$img"]=1
      done
    done

    for IMAGE in "${!images_map[@]}"; do
      echo "Processing image: $IMAGE"

      # Check if image is already in the registry
      if crictl inspecti $(crictl images -q | grep "$IMAGE") &> /dev/null; then
        echo "Image $IMAGE already exists in registry."
        continue
      fi

      # Retag the image
      NEW_IMAGE="$REGISTRY_URL/${IMAGE#*/}"
      crictl tag $IMAGE $NEW_IMAGE

      # Push the image to the registry
      crictl push $NEW_IMAGE

      echo "Pushed $NEW_IMAGE to registry."
    done

    echo "Image synchronization complete."
